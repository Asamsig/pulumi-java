// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.my8664;

import io.pulumi.azuread.inputs.ConditionalAccessPolicyConditions;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.util.Objects;


public final class ConditionalAccessPolicyArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyArgs Empty = new ConditionalAccessPolicyArgs();

    @InputImport(name="conditions", required=true)
    private final Input<ConditionalAccessPolicyConditions> conditions;

    public Input<ConditionalAccessPolicyConditions> getConditions() {
        return this.conditions;
    }

    public ConditionalAccessPolicyArgs(Input<ConditionalAccessPolicyConditions> conditions) {
        this.conditions = Objects.requireNonNull(conditions, "expected parameter 'conditions' to be non-null");
    }

    private ConditionalAccessPolicyArgs() {
        this.conditions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<ConditionalAccessPolicyConditions> conditions;

        public Builder() {
    	      // Empty
        }

        public Builder(ConditionalAccessPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
        }

        public Builder setConditions(Input<ConditionalAccessPolicyConditions> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }

        public Builder setConditions(ConditionalAccessPolicyConditions conditions) {
            this.conditions = Input.of(Objects.requireNonNull(conditions));
            return this;
        }

        public ConditionalAccessPolicyArgs build() {
            return new ConditionalAccessPolicyArgs(conditions);
        }
    }
}
