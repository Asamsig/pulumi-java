// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.example.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.random.RandomPet;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PetArgs extends io.pulumi.resources.ResourceArgs {

    public static final PetArgs Empty = new PetArgs();

    @InputImport(name="age")
    private final @Nullable Input<Integer> age;

    public Input<Integer> getAge() {
        return this.age == null ? Input.empty() : this.age;
    }

    @InputImport(name="name")
    private final @Nullable Input<RandomPet> name;

    public Input<RandomPet> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="nameArray")
    private final @Nullable Input<List<RandomPet>> nameArray;

    public Input<List<RandomPet>> getNameArray() {
        return this.nameArray == null ? Input.empty() : this.nameArray;
    }

    @InputImport(name="nameMap")
    private final @Nullable Input<Map<String,RandomPet>> nameMap;

    public Input<Map<String,RandomPet>> getNameMap() {
        return this.nameMap == null ? Input.empty() : this.nameMap;
    }

    @InputImport(name="requiredName", required=true)
    private final Input<RandomPet> requiredName;

    public Input<RandomPet> getRequiredName() {
        return this.requiredName;
    }

    @InputImport(name="requiredNameArray", required=true)
    private final Input<List<RandomPet>> requiredNameArray;

    public Input<List<RandomPet>> getRequiredNameArray() {
        return this.requiredNameArray;
    }

    @InputImport(name="requiredNameMap", required=true)
    private final Input<Map<String,RandomPet>> requiredNameMap;

    public Input<Map<String,RandomPet>> getRequiredNameMap() {
        return this.requiredNameMap;
    }

    public PetArgs(
        @Nullable Input<Integer> age,
        @Nullable Input<RandomPet> name,
        @Nullable Input<List<RandomPet>> nameArray,
        @Nullable Input<Map<String,RandomPet>> nameMap,
        Input<RandomPet> requiredName,
        Input<List<RandomPet>> requiredNameArray,
        Input<Map<String,RandomPet>> requiredNameMap) {
        this.age = age;
        this.name = name;
        this.nameArray = nameArray;
        this.nameMap = nameMap;
        this.requiredName = Objects.requireNonNull(requiredName, "expected parameter 'requiredName' to be non-null");
        this.requiredNameArray = Objects.requireNonNull(requiredNameArray, "expected parameter 'requiredNameArray' to be non-null");
        this.requiredNameMap = Objects.requireNonNull(requiredNameMap, "expected parameter 'requiredNameMap' to be non-null");
    }

    private PetArgs() {
        this.age = Input.empty();
        this.name = Input.empty();
        this.nameArray = Input.empty();
        this.nameMap = Input.empty();
        this.requiredName = Input.empty();
        this.requiredNameArray = Input.empty();
        this.requiredNameMap = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> age;
        private @Nullable Input<RandomPet> name;
        private @Nullable Input<List<RandomPet>> nameArray;
        private @Nullable Input<Map<String,RandomPet>> nameMap;
        private Input<RandomPet> requiredName;
        private Input<List<RandomPet>> requiredNameArray;
        private Input<Map<String,RandomPet>> requiredNameMap;

        public Builder() {
    	      // Empty
        }

        public Builder(PetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.age = defaults.age;
    	      this.name = defaults.name;
    	      this.nameArray = defaults.nameArray;
    	      this.nameMap = defaults.nameMap;
    	      this.requiredName = defaults.requiredName;
    	      this.requiredNameArray = defaults.requiredNameArray;
    	      this.requiredNameMap = defaults.requiredNameMap;
        }

        public Builder setAge(@Nullable Input<Integer> age) {
            this.age = age;
            return this;
        }

        public Builder setAge(@Nullable Integer age) {
            this.age = Input.ofNullable(age);
            return this;
        }

        public Builder setName(@Nullable Input<RandomPet> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable RandomPet name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNameArray(@Nullable Input<List<RandomPet>> nameArray) {
            this.nameArray = nameArray;
            return this;
        }

        public Builder setNameArray(@Nullable List<RandomPet> nameArray) {
            this.nameArray = Input.ofNullable(nameArray);
            return this;
        }

        public Builder setNameMap(@Nullable Input<Map<String,RandomPet>> nameMap) {
            this.nameMap = nameMap;
            return this;
        }

        public Builder setNameMap(@Nullable Map<String,RandomPet> nameMap) {
            this.nameMap = Input.ofNullable(nameMap);
            return this;
        }

        public Builder setRequiredName(Input<RandomPet> requiredName) {
            this.requiredName = Objects.requireNonNull(requiredName);
            return this;
        }

        public Builder setRequiredName(RandomPet requiredName) {
            this.requiredName = Input.of(Objects.requireNonNull(requiredName));
            return this;
        }

        public Builder setRequiredNameArray(Input<List<RandomPet>> requiredNameArray) {
            this.requiredNameArray = Objects.requireNonNull(requiredNameArray);
            return this;
        }

        public Builder setRequiredNameArray(List<RandomPet> requiredNameArray) {
            this.requiredNameArray = Input.of(Objects.requireNonNull(requiredNameArray));
            return this;
        }

        public Builder setRequiredNameMap(Input<Map<String,RandomPet>> requiredNameMap) {
            this.requiredNameMap = Objects.requireNonNull(requiredNameMap);
            return this;
        }

        public Builder setRequiredNameMap(Map<String,RandomPet> requiredNameMap) {
            this.requiredNameMap = Input.of(Objects.requireNonNull(requiredNameMap));
            return this;
        }

        public PetArgs build() {
            return new PetArgs(age, name, nameArray, nameMap, requiredName, requiredNameArray, requiredNameMap);
        }
    }
}
